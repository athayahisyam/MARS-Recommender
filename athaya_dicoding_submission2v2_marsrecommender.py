# -*- coding: utf-8 -*-
"""Athaya-Dicoding-Submission2v2-MARSRecommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/197AnLOkzaTX1aDj1rukXl3Gvkx4G-dVu

# Kelas Apa yang Harus Saya Ikuti?

Model Rekomendasi Kelas Daring

Dataset yang digunakan adalah dataset dari sistem pembelajaran [Office 365 MOOC](https://dileap.com/en/) yang diselenggarakan oleh Mandarine Academy, University of Lille. Data diterbitkan tahun 2022 dan disimpan pada repositori [Harvard Dataverse](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/BMY3UD).

Sitasi data:
Hafsa, M., Wattebled, P., Jacques, J., & Jourdan, L. (2023). E-learning recommender system dataset. Data in Brief, 47, 108942. https://doi.org/10.1016/j.dib.2023.108942

Sebagai catatan projek ini dikerjakan pada Google Colaboratory, semua *path* disesuaikan dengan spesifikasi pada Google Colaboratory.

![Picture](https://raw.githubusercontent.com/athayahisyam/MARS-Recommender/main/media/officemoocMandarine.jpg)

# *Library Import*

Ditambah sesuai kebutuhan
"""

!pip install scikit-learn

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics.pairwise import cosine_similarity

"""# Akuisisi Data"""

items = pd.read_csv("/content/items_en_cleaned_2.csv")

"""## Isi `Items`

Tabel Items adalah tabel referensi data course video yang terdaftar pada sistem
"""

# Melihat struktur dataframe
items.info()

# Lima baris pertama pada item
items.head()

# Distribusi Bahasa
items['language'].value_counts().plot(kind='bar', figsize=(10, 5))
plt.title('Distribusi Bahasa')
plt.xlabel('Bahasa')
plt.ylabel('Jumlah')
plt.show()

# Distribusi Tema
items['Theme'].value_counts().plot(kind='bar', figsize=(10, 5))
plt.title('Distribusi Tema')
plt.xlabel('Tema')
plt.ylabel('Jumlah')
plt.show()

# Distribusi tingkat kesulitan
items['Difficulty'].value_counts().plot(kind='bar', figsize=(10, 5))
plt.title('Distribusi Tingkat Kesulitan')
plt.xlabel('Tingkat Kesulitan')
plt.ylabel('Jumlah')
plt.show()

# Distribusi Tipe
items['type'].value_counts().plot(kind='bar', figsize=(10, 5))
plt.title('Distribusi Tipe Konten')
plt.xlabel('Tipe')
plt.ylabel('Jumlah')
plt.show()

"""# *Data Preprocessing*

Pada `Items` ditemukan data kosong (*null values*). Pada tahap *preprocessing*, data kosong tersebut akan ditangani.

## Data Kosong pada `Items`

Pada `Items` data kosong terdapat pada `nb_views`. Karena `nb_views` akan digunakan pada *feature encoding*, `nb_views` akan diimputasi menggunakan *mean imputation*
"""

# Imputasi rata-rata untuk nb_views
items['nb_views'] = items['nb_views'].fillna(items['nb_views'].mean())

# Cek nilai kosong
print(items.isnull().sum())

"""# *Data Preparation*

## Feature Encoding

*Encoding* dibutuhkan untuk mengubah data kategori menjadi numerikal.
"""

# One-hot encoding untuk dataframe item
items_encoded = pd.get_dummies(items, columns=['language', 'Difficulty', 'Theme', 'type'])

# Lima baris pertama data yang telah di encoding
items_encoded.head()

# Membuat variabel baru untuk menyimpan data yang digunakan untuk membuat cosine similarity
items_encoded_selected = items_encoded.drop(['item_id', 'name', 'created_at'], axis=1)

"""# Modelling

## Pengukuran Cosine Similarity
"""

# Menghitung cosine similarity dari data numerik
cosine_sim_matrix = cosine_similarity(items_encoded_selected)

# Ubah menjadi dataframe
# item_id menjadi index.
cosine_sim_df = pd.DataFrame(cosine_sim_matrix, index=items_encoded['item_id'], columns=items_encoded['item_id'])

cosine_sim_df.head()

items_encoded_selected.head()

"""## Fungsi Rekomendasi"""

def get_similar_items(item_id, num_items):
    # Ambil data yang sesuai dengan item_id
    item_similarities = cosine_sim_df.loc[item_id]

    # Urutkan berdasarkan kemiripan
    similar_items = item_similarities.sort_values(ascending=False)

    # Menghapus item input dan menyisakan item yang direkomendasikan
    similar_items = similar_items.drop(item_id)

    # Ambil n peringkat teratas
    top_similar_items = similar_items.head(num_items)

    # Peroleh data detail item rekomendasi dan item input
    input_item_details = items[items['item_id'] == item_id][['item_id', 'name', 'Theme']]
    similar_item_details = items[items['item_id'].isin(top_similar_items.index)][['item_id', 'name', 'Theme']]

    return input_item_details, similar_item_details

"""## Output Rekomendasi"""

# masukkan ID disini, lihat pada tabel Items untuk mengecek adanya item_id
input_item, similar_items = get_similar_items(825, 10)

print(f"ID Konten = {input_item['item_id'].values[0]}\n")
input_item

print("\nKonten yang Mirip:\n")
similar_items

